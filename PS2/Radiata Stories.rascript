// Radiata Stories
// #ID = 2658

////Constants

characterID = {
	
	"Jack": 1,
	"Ganz": 2,
	"Ridley": 3,
	"Rynka": 4,
	"Flau": 5,
	"Star": 6,
	"Sebastian": 7,
	"Genius": 8,
	"Rocky": 9,
	"Gawain": 0xa,
	"Elwen": 0xc,
	"Gerald": 0xd,
	"Caesar": 0xe,
	"Alicia": 0xf,
	"Dennis": 0x10,
	"Gareth": 0x11,
	"Gregory": 0x12,
	"Walter": 0x13,
	"Jarvis": 0x14,
	"Aldo": 0x16,
	"Gordon": 0x17,
	"Bruce": 0x18,
	"David": 0x19,
	"Conrad": 0x1a,
	"Rolec": 0x1b,
	"Daniel": 0x1c,
	"Carlos": 0x1d,
	"Gene": 0x1e,
	"Thanos": 0x20,
	"Curtis": 0x21,
	"Cecil": 0x22,
	"Morgan": 0x23,
	"Felix": 0x24,
	"Jill": 0x25,
	"Ursula": 0x26,
	"Derek": 0x27,
	"Christoph": 0x28,
	"Claudia": 0x29,
	"Ardoph": 0x2a,
	"Dimitri": 0x2b,
	"Aidan": 0x2c,
	"Cornelia": 0x2d,
	"Faraus": 0x2e,
	"Marietta": 0x2f,
	"Ernest": 0x30,
	"Franklin": 0x31,
	"Johan": 0x32,
	"Kain": 0x35,
	"Fernando": 0x36,
	"Anastasia": 0x37,
	"Dwight": 0x38,
	"Godwin": 0x39,
	"Achilles": 0x3a,
	"Flora": 0x3b,
	"Elena": 0x3c,
	"Alvin": 0x3d,
	"Vitas": 0x3e,
	"Cosmo": 0x3f,
	"Grant": 0x40,
	"Adina": 0x41,
	"Miranda": 0x42,
	"Edgar": 0x43,
	"Clive": 0x44,
	"Lulu": 0x45,
	"Euene": 0x46,
	"Nyx": 0x47,
	"Ortoroz": 0x48,
	"Sonata": 0x49,
	"Iris": 0x4a,
	"Nocturne": 0x4b,
	"Herz": 0x4c,
	"Alba": 0x4d,
	"Lily": 0x4e,
	"Jared": 0x4f,
	"Pinky": 0x50,
	"Interlude": 0x51,
	"Solo": 0x52,
	"Joaquel": 0x53,
	"Eon": 0x54,
	"Elmo": 0x55,
	"Natalie": 0x5d,
	"Nina": 0x5e,
	"Charlie": 0x5f,
	"Leonard": 0x60,
	"Paul": 0x67,
	"Giske": 0x6e,
	"Lyle": 0x76,
	"Morfinn": 0x7a,
	"Bligh": 0x7b,
	"Dan": 0x80,
	"Elef": 0x89,
	"Ryan": 0x8a,
	"Hip": 0x8b,
	"Nick": 0x8c,
	"Golye": 0x8f,
	"Butch": 0x90,
	"Sarval": 0x91,
	"Sunset": 0x92,
	"Keaton": 0x94,
	"Tarkin": 0x95,
	"Gonber": 0x96,
	"Leban": 0x97,
	"Mook": 0x98,
	"Wal": 0x99,
	"Wyze": 0x9a,
	"Zeranium": 0x9b,
	"Oleg": 0xa7,
	"Grigory": 0xa8,
	"Dyvad": 0xaa,
	"Naom": 0xad,
	"Gil": 0xb3,
	"Shin": 0xb4,
	"Fan": 0xb5,
	"Row": 0xb6,
	"Pitt": 0xb7,
	"Few": 0xb8,
	"Alan": 0xb9,
	"Keane": 0xba,
	"Clarence": 0xbc,
	"Serva": 0xbd,
	"Hyann": 0xbe,
	"Chatt": 0xbf,
	"Zida": 0xc0,
	"Franz": 0xc1,
	"Romaria": 0xc2,
	"Marsha": 0xc3,
	"Lufa": 0xc4,
	"Coco": 0xc5,
	"Martinez": 0xc6,
	"Santos": 0xc7,
	"Rika": 0xc8,
	"Mikey": 0xc9,
	"Gob": 0xca,
	"Lin": 0xcb,
	"Brie": 0xcc,
	"Gonn": 0xcd,
	"Golly": 0xce,
	"Gobrey": 0xcf,
	"Den": 0xd0,
	"Ben": 0xd1,
	"Aesop": 0xd2,
	"Monki": 0xd3,
	"Gabe": 0xd4,
	"Mason": 0xd5,
	"Goo": 0xd6,
	"Donkey": 0xd7,
	"Ricky": 0xd8,
	"Drew": 0xd9,
	"Gruel": 0xda,
	"Doppio": 0xdb,
	"Pietro": 0xdc,
	"Jan": 0xdd,
	"Marco": 0xde,
	"Niko": 0xdf,
	"Danny": 0xe0,
	"Dominic": 0xe1,
	"Bosso": 0xe2,
	"Georgio": 0xe3,
	"Luka": 0xe4,
	"Sonny": 0xe5,
	"Giovanni": 0xe6,
	"Polpo": 0xe7,
	"JJ": 0xe8,
	"Leona": 0xe9,
	"Valkyrie": 0xee,
	"Galvados": 0xf7,
	"Adele": 0x118,
	"Howard": 0x119,
	"Astor": 0x11b,
	"Synelia": 0x11d,
	"Tony": 0x11e,
	"Patrick": 0x11f,
	"Putt": 0x120,
	"Bran": 0x125,
	"Stefan": 0x126,
	"Yack": 0x129,
	"Garcia": 0x12c,
	"Dynas": 0x12d
}

friendIDs = [1,2,3,4,5,6,7,8,9,0xa,0xc,0xd,0xe,0xf,0x10,0x11,0x12,0x13,0x14,0x16,0x17,0x18,0x19,0x1a,0x1b,0x1c,0x1d,0x1e,0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,0x30,0x31,0x32,0x35,0x36,0x37,0x38,0x39,0x3a,0x3b,0x3c,0x3d,0x3e,0x3f,0x40,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x4c,0x4d,0x4e,0x4f,0x50,0x51,0x52,0x53,0x54,0x55,0x5d,0x5e,0x5f,0x60,0x67,0x6e,0x76,0x7a,0x7b,0x80,0x89,0x8a,0x8b,0x8c,0x8f,0x90,0x91,0x92,0x94,0x95,0x96,0x97,0x98,0x99,0x9a,0x9b,0xa8,0xaa,0xad,0xb3,0xb4,0xb5,0xb6,0xb7,0xb8,0xb9,0xba,0xbc,0xbd,0xbe,0xbf,0xc0,0xc1,0xc2,0xc3,0xc4,0xc5,0xc6,0xc7,0xc8,0xc9,0xca,0xcb,0xcc,0xcd,0xce,0xcf,0xd0,0xd1,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8,0xd9,0xda,0xdb,0xdc,0xdd,0xde,0xdf,0xe0,0xe1,0xe2,0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,0xee,0xf7,0x118,0x119,0x11b,0x11d,0x11e,0x11f,0x120,0x125,0x126,0x129,0x12c,0x12d]

dates = ["Adina", "Alicia", "Anastasia", "Charlie", "Claudia", "Cornelia", "Elena", "Flau", "Flora", "Herz", "Iris", "Jill", "Leona", "Lily", "Lulu", "Marietta", "Miranda", "Morgan", "Natalie", "Nina", "Rynka", "Synelia", "Ursula", "Vitas"]
hardDates = ["Flau", "Rynka"]

missions = {

	1: "Vexatious Vermin",
	2: "Smilodon Fang",
	3: "Creatures of the Sewer",
	4: "Treasure of Goblin Cemetery",
	6: "The Alien Monster",
	7: "Stone of Miracles",
	8: "Please Stop Lord Star",
	0xa: "The Ultimate Battle",
	0xb: "The Real Ultimate Battle",
	0xc: "Gonovitch's Dilemma",
	0xd: "Letter of Defiance",
	0xe: "A Masterpiece of Fantasy",
	0xf: "Beasts by the Bridge",
	0x10: "Secret of the Sewer",
	0x11: "Build That Body!",
	0x12: "Top Secret Mission"
}

missionOrder = [0xe, 2, 0xf, 1, 3, 4, 0xa, 0xc, 7, 0x12, 0x11, 8, 0xb, 0xd, 6, 0x10]
nonmissableMissions = [7]
humanSideMissions = [6, 8, 0xb, 0xd, 0x10]

baseAddr = 0x6172f0

characterOffset = 0x370
activeDataPointerOffset = 4
friendOffset = 0x1d
dagolsOffset = 0x68
roomOffset = 0x84
inventoryOffset = 0xb8

animationPointerOffset = 0x74
animationOffset = 0xc0
powerWalking = [0x3f, 0x40]

olegTaskCompleteOffset = 0x8d

////Common Functions

function bitflag(index, addr) => bit(index, mainPtr() + addr - baseAddr)

function music() => dword(0x18d580)

function mainPtr() => dword(0x18e8d0)
function validPtr() => mainPtr() != 0
function notLoading() => byte(0x37f9c6) + byte(0x37f9c7) + byte(0x37f9fc) != 0

function battleStatus() => byte(0x37fb6d)
function winBattle() => battleStatus() == 1
function loseBattle() => battleStatus() == 2
function firstEnemy() => dword(0x37fb94)
function inBattle() => bitflag(4, 0x61631b) == 1

//Hidden Items (342 Total)

//Pre-Theater Vancoor
adienRegionItems = [bitflag(7, 0x61641b), bitflag(3, 0x616422), bitflag(7, 0x616446), bitflag(5, 0x616446), bitflag(3, 0x616446), bitflag(1, 0x616446), bitflag(3, 0x616447), bitflag(1, 0x616447), bitflag(7, 0x61644f), bitflag(5, 0x61644f), bitflag(3, 0x61644f), bitflag(7, 0x6163fc)] //12
dovaRegionItems = [bitflag(5, 0x6163fc), bitflag(7, 0x616447), bitflag(5, 0x616447), bitflag(1, 0x616448), bitflag(3, 0x616449), bitflag(1, 0x616449)] //6
earthValleyItems = [bitflag(3, 0x616403), bitflag(3, 0x616424), bitflag(5, 0x61642c), bitflag(5, 0x61642d), bitflag(3, 0x61642d), bitflag(1, 0x61642d), bitflag(7, 0x61642e), bitflag(5, 0x61642e), bitflag(1, 0x61642e), bitflag(5, 0x61642f), bitflag(3, 0x61642f), bitflag(1, 0x61642f)] //12
dwarfTunnelItems = [bitflag(5, 0x616402), bitflag(3, 0x616402), bitflag(1, 0x616402), bitflag(5, 0x61640a), bitflag(3, 0x616415), bitflag(1, 0x616415), bitflag(7, 0x61641c), bitflag(5, 0x61641c), bitflag(7, 0x616422), bitflag(7, 0x616423), bitflag(3, 0x616423), bitflag(1, 0x616424), bitflag(7, 0x61642a), bitflag(5, 0x61642a), bitflag(3, 0x61642a), bitflag(7, 0x61642b), bitflag(5, 0x61642b), bitflag(3, 0x61642b), bitflag(1, 0x61642b), bitflag(7, 0x616435), bitflag(5, 0x616435), bitflag(7, 0x61643a), bitflag(5, 0x61643a)] //23
cuatourRegionItems = [bitflag(5, 0x616449), bitflag(7, 0x61640a)] //2
elfRegionItems = [bitflag(7, 0x6163fb), bitflag(1, 0x6163fc), bitflag(1, 0x61641c), bitflag(3, 0x61644c), bitflag(1, 0x61644c)] //5
nowemRegionItems = [bitflag(5, 0x6163fa), bitflag(5, 0x6163fb), bitflag(3, 0x6163fb), bitflag(7, 0x616414), bitflag(7, 0x616443), bitflag(5, 0x616443), bitflag(7, 0x616444), bitflag(5, 0x616444), bitflag(3, 0x616444), bitflag(1, 0x616444), bitflag(7, 0x616445), bitflag(5, 0x616445), bitflag(3, 0x616445), bitflag(1, 0x616445), bitflag(3, 0x616476)] //15
forestMetropolisItems = [bitflag(5, 0x616436), bitflag(3, 0x616436), bitflag(1, 0x616436), bitflag(3, 0x616437), bitflag(1, 0x616437), bitflag(7, 0x616438), bitflag(5, 0x616438), bitflag(3, 0x616438), bitflag(1, 0x616438), bitflag(1, 0x616439)] //10
//Pre-Split
ochoRegionItems = [bitflag(1, 0x6163fd), bitflag(3, 0x61641c), bitflag(7, 0x61644c), bitflag(5, 0x61644c), bitflag(5, 0x61644d), bitflag(3, 0x61644d), bitflag(1, 0x61644d)] //7
pathOfTheSpiderItems = [bitflag(7, 0x616401), bitflag(5, 0x616401), bitflag(3, 0x616401), bitflag(7, 0x616409)] //4
dorseRegionItems = [bitflag(7, 0x6163fe), bitflag(3, 0x6163fe), bitflag(1, 0x6163fe), bitflag(3, 0x61644a), bitflag(7, 0x616451), bitflag(5, 0x616451), bitflag(3, 0x616451), bitflag(1, 0x616451), bitflag(5, 0x616452), bitflag(3, 0x616452), bitflag(1, 0x616452)] //11
shangriLaItems = [bitflag(7, 0x61643b), bitflag(3, 0x61643b), bitflag(7, 0x61643c), bitflag(5, 0x61643c), bitflag(3, 0x61643c)] //5
goblinCemeteryItems = [bitflag(7, 0x616404), bitflag(5, 0x616404), bitflag(3, 0x616404), bitflag(5, 0x616405), bitflag(3, 0x616405), bitflag(1, 0x616405)] //6
septemRegionItems = [bitflag(7, 0x6163fd), bitflag(5, 0x616422), bitflag(7, 0x61644e), bitflag(1, 0x61644f), bitflag(3, 0x616450), bitflag(1, 0x616450), bitflag(7, 0x616476), bitflag(5, 0x616476)] //8
septemCaveItems = [bitflag(7, 0x616400), bitflag(1, 0x616401), bitflag(1, 0x616407)] //3
//Post-Split Both Sides
//Nonhuman Side Focused
algandarsCastleItems = [bitflag(5, 0x616400), bitflag(3, 0x616400)] //2
dichettRegionItems = [bitflag(7, 0x6163ff), bitflag(1, 0x616400), bitflag(7, 0x616429), bitflag(5, 0x616429), bitflag(3, 0x616429), bitflag(7, 0x616452), bitflag(7, 0x616453), bitflag(5, 0x616453), bitflag(3, 0x616453), bitflag(5, 0x616454), bitflag(3, 0x616454), bitflag(1, 0x616454)] //12
fireMountainItems = [bitflag(7, 0x616402), bitflag(1, 0x616403)] //2
desneufRegionItems = [bitflag(5, 0x6163fd), bitflag(3, 0x6163fd), bitflag(5, 0x616414), bitflag(1, 0x616422), bitflag(3, 0x61644e), bitflag(1, 0x61644e)] //6
borgandiazoItems = [bitflag(7, 0x616405), bitflag(5, 0x616406), bitflag(3, 0x616406), bitflag(1, 0x616406), bitflag(7, 0x616440), bitflag(1, 0x616440), bitflag(7, 0x616441), bitflag(3, 0x616441), bitflag(1, 0x616441)] //9
//Human Side Focused
triaRegionItems = [bitflag(3, 0x6163fc), bitflag(3, 0x616414), bitflag(7, 0x616434), bitflag(1, 0x616435), bitflag(7, 0x616449), bitflag(7, 0x61644a), bitflag(5, 0x61644a), bitflag(1, 0x61644a), bitflag(7, 0x61644b), bitflag(5, 0x61644b), bitflag(3, 0x61644b), bitflag(1, 0x61644b), bitflag(7, 0x616455), bitflag(3, 0x616456), bitflag(1, 0x616456), bitflag(7, 0x616457), bitflag(5, 0x616457), bitflag(3, 0x616457), bitflag(5, 0x616458), bitflag(3, 0x616458), bitflag(7, 0x616460), bitflag(5, 0x616460)] //22
windValleyItems = [bitflag(7, 0x6163fa), bitflag(1, 0x6163fb)] //2
//Nonhuman Side Only
cityOfFlowersItems = [bitflag(3, 0x616431), bitflag(1, 0x616431), bitflag(7, 0x616432), bitflag(5, 0x616432), bitflag(3, 0x616432), bitflag(1, 0x616432), bitflag(5, 0x616433), bitflag(3, 0x616434)] //8
fortHelenciaItems = [bitflag(1, 0x61640a), bitflag(3, 0x616435)] //2
sedicheRegionItems = [bitflag(3, 0x6163fa), bitflag(1, 0x6163fa), bitflag(1, 0x61643a), bitflag(7, 0x616442), bitflag(5, 0x616442), bitflag(3, 0x616443), bitflag(1, 0x616443), bitflag(3, 0x616478)] //8
goblinHavenItems = [bitflag(5, 0x61643d), bitflag(7, 0x61643e), bitflag(3, 0x61643e)] //3
//Human Side Only
radiataCastleItems = [bitflag(7, 0x616439), bitflag(7, 0x616466), bitflag(5, 0x616466), bitflag(3, 0x616466), bitflag(7, 0x616467), bitflag(5, 0x616467), bitflag(3, 0x616467), bitflag(1, 0x616467), bitflag(7, 0x616468), bitflag(5, 0x616468), bitflag(3, 0x616468), bitflag(1, 0x616468), bitflag(7, 0x616469), bitflag(5, 0x616469), bitflag(3, 0x616469), bitflag(1, 0x616469), bitflag(7, 0x61646a), bitflag(5, 0x61646a), bitflag(3, 0x61646a), bitflag(5, 0x61646b), bitflag(3, 0x61646b), bitflag(1, 0x61646b), bitflag(7, 0x61646c), bitflag(5, 0x61646c), bitflag(5, 0x61646d), bitflag(3, 0x61646d), bitflag(1, 0x61646d)] //27
yellowTownItems = [bitflag(7, 0x616406), bitflag(7, 0x61646e), bitflag(1, 0x61646f), bitflag(5, 0x616472), bitflag(3, 0x616472), bitflag(5, 0x616475), bitflag(3, 0x616475)] //7
vancoorSquareItems = [bitflag(3, 0x61646f), bitflag(3, 0x616473), bitflag(1, 0x616473)] //3
pathOfSwordsItems = [bitflag(5, 0x616403), bitflag(5, 0x61646e), bitflag(7, 0x616474), bitflag(1, 0x616475), bitflag(1, 0x616476), bitflag(1, 0x6164ef)] //6
whiteTownItems = [bitflag(7, 0x616473), bitflag(5, 0x616473), bitflag(5, 0x616474), bitflag(3, 0x616474), bitflag(1, 0x616474)] //5
olacianOrderItems = [bitflag(7, 0x61641e), bitflag(5, 0x61641f), bitflag(3, 0x61641f), bitflag(1, 0x61641f), bitflag(5, 0x616420), bitflag(1, 0x616420), bitflag(3, 0x616421), bitflag(1, 0x616421)] //8
pathOfTheSunItems = [bitflag(5, 0x61646f)] //1
blueTownItems = [bitflag(7, 0x616471)] //1
pathOfInsanityItems = [bitflag(7, 0x6164ef)] //1
pathToTheBeastItems = [bitflag(3, 0x6164ef)] //1
blackTownItems = [bitflag(7, 0x61646f), bitflag(5, 0x616471), bitflag(1, 0x616471), bitflag(5, 0x6164ef)] //4
beastPitItems = [bitflag(5, 0x616427), bitflag(3, 0x616427), bitflag(1, 0x616427), bitflag(7, 0x616428), bitflag(5, 0x616428), bitflag(3, 0x616428), bitflag(5, 0x616470), bitflag(1, 0x616470), bitflag(7, 0x616475)] //9
theaterVancoorItems = [bitflag(1, 0x616404), bitflag(7, 0x61640e), bitflag(3, 0x61640e), bitflag(1, 0x61640e), bitflag(3, 0x61640f), bitflag(3, 0x616410), bitflag(1, 0x616410), bitflag(7, 0x616411), bitflag(5, 0x616411), bitflag(3, 0x616411), bitflag(5, 0x616412), bitflag(3, 0x616412), bitflag(1, 0x616412), bitflag(7, 0x616413), bitflag(5, 0x616413), bitflag(3, 0x616413), bitflag(1, 0x616414)] //17
varethMagicItems = [bitflag(1, 0x61640d), bitflag(5, 0x616415), bitflag(7, 0x616416), bitflag(1, 0x616416), bitflag(5, 0x616417), bitflag(3, 0x616417), bitflag(1, 0x616417), bitflag(7, 0x616418), bitflag(3, 0x616418), bitflag(1, 0x616418), bitflag(7, 0x616419), bitflag(5, 0x616419), bitflag(3, 0x616419), bitflag(1, 0x616419), bitflag(7, 0x61641a), bitflag(5, 0x61641a), bitflag(5, 0x61641b), bitflag(3, 0x61641b)] //18
voidCommunityItems = [bitflag(7, 0x616403), bitflag(7, 0x616424), bitflag(7, 0x616425), bitflag(3, 0x616425), bitflag(1, 0x616425), bitflag(7, 0x616426), bitflag(1, 0x616426)] //7
radiataCityItems = [bitflag(7, 0x616406), bitflag(7, 0x61646e), bitflag(1, 0x61646f), bitflag(5, 0x616472), bitflag(3, 0x616472), bitflag(5, 0x616475), bitflag(3, 0x616475), bitflag(3, 0x61646f), bitflag(3, 0x616473), bitflag(1, 0x616473), bitflag(5, 0x616403), bitflag(5, 0x61646e), bitflag(7, 0x616474), bitflag(1, 0x616475), bitflag(1, 0x616476), bitflag(1, 0x6164ef), bitflag(7, 0x616473), bitflag(5, 0x616473), bitflag(5, 0x616474), bitflag(3, 0x616474), bitflag(1, 0x616474), bitflag(7, 0x61641e), bitflag(5, 0x61641f), bitflag(3, 0x61641f), bitflag(1, 0x61641f), bitflag(5, 0x616420), bitflag(1, 0x616420), bitflag(3, 0x616421), bitflag(1, 0x616421), bitflag(5, 0x61646f), bitflag(7, 0x616471), bitflag(7, 0x6164ef), bitflag(3, 0x6164ef), bitflag(7, 0x61646f), bitflag(5, 0x616471), bitflag(1, 0x616471), bitflag(5, 0x6164ef), bitflag(5, 0x616427), bitflag(3, 0x616427), bitflag(1, 0x616427), bitflag(7, 0x616428), bitflag(5, 0x616428), bitflag(3, 0x616428), bitflag(5, 0x616470), bitflag(1, 0x616470), bitflag(7, 0x616475), bitflag(1, 0x616404), bitflag(7, 0x61640e), bitflag(3, 0x61640e), bitflag(1, 0x61640e), bitflag(3, 0x61640f), bitflag(3, 0x616410), bitflag(1, 0x616410), bitflag(7, 0x616411), bitflag(5, 0x616411), bitflag(3, 0x616411), bitflag(5, 0x616412), bitflag(3, 0x616412), bitflag(1, 0x616412), bitflag(7, 0x616413), bitflag(5, 0x616413), bitflag(3, 0x616413), bitflag(1, 0x616414), bitflag(1, 0x61640d), bitflag(5, 0x616415), bitflag(7, 0x616416), bitflag(1, 0x616416), bitflag(5, 0x616417), bitflag(3, 0x616417), bitflag(1, 0x616417), bitflag(7, 0x616418), bitflag(3, 0x616418), bitflag(1, 0x616418), bitflag(7, 0x616419), bitflag(5, 0x616419), bitflag(3, 0x616419), bitflag(1, 0x616419), bitflag(7, 0x61641a), bitflag(5, 0x61641a), bitflag(5, 0x61641b), bitflag(3, 0x61641b), bitflag(7, 0x616403), bitflag(7, 0x616424), bitflag(7, 0x616425), bitflag(3, 0x616425), bitflag(1, 0x616425), bitflag(7, 0x616426), bitflag(1, 0x616426)] //88
//End-game
dysettRegionItems = [bitflag(1, 0x61642a), bitflag(7, 0x616430), bitflag(5, 0x616430), bitflag(3, 0x616430), bitflag(7, 0x616454), bitflag(5, 0x616455), bitflag(3, 0x616455), bitflag(1, 0x616455)] //8
cityOfWhiteNightsItems = [bitflag(5, 0x6163ff), bitflag(3, 0x6163ff), bitflag(1, 0x6163ff)] //3
//Post-game
dragonLairCaveItems = [bitflag(7, 0x616407), bitflag(5, 0x616407), bitflag(3, 0x616407), bitflag(1, 0x616408)] //4
distortionCorridorItems = [bitflag(5, 0x616409), bitflag(3, 0x616409), bitflag(1, 0x616409)] //3
shrineOfFrayItems = [bitflag(7, 0x616408), bitflag(5, 0x616408), bitflag(3, 0x616408), bitflag(3, 0x61640a)] //4

function recentlyCompletedMission() => dword(mainPtr() + 0x616750 - baseAddr)
function highestAffectionCharacter() => word(mainPtr() + 0x616858 - baseAddr)

function interactionID() => dword(mainPtr() + 0x11d44)
function interactionPtr() => dword(mainPtr() + 0x11d48)
function dialoguePtr() => dword(mainPtr() + 0x11d4c)
function specificDialogue(offset) => dialoguePtr() - interactionPtr() == offset

function characterPtr() => dword(dword(mainPtr() + 0x1b294) + 0x20)
function dagols() => dword(characterPtr() + characterOffset*characterID["Jack"] + dagolsOffset)
function room() => word(characterPtr() + characterOffset*characterID["Jack"] + roomOffset)
function validRoom() => room() != 0
function characterRoom(characterID) => word(characterPtr() + characterOffset*characterID + roomOffset)
function commonItemSlot(index) => word(characterPtr() + characterOffset*characterID["Jack"] + inventoryOffset + 4*(index-1))
function getCommonItem(itemID) {

	tmp = always_false()
	
	for i in range(1, 100) {
	
		tmp = tmp || prev(commonItemSlot(i)) == 0 && commonItemSlot(i) == itemID
	}
	
	return tmp
}

function animationPtr() => dword(dword(characterPtr() + characterOffset*characterID["Jack"] + activeDataPointerOffset) + animationPointerOffset)
function animation() => word(animationPtr() + animationOffset)

////Trigger Functions

function bitflagTrue(room, index, addr) => validPtr() && notLoading() && room() == room && bitflag(index, addr) > prev(bitflag(index, addr))
function bitflagFalse(room, index, addr) => validPtr() && notLoading() && room() == room && bitflag(index, addr) < prev(bitflag(index, addr))

//Progression

function completeMission(missionID) => validPtr() && room() == 0x1f8 && prev(recentlyCompletedMission()) == missionID && recentlyCompletedMission() == 0

//Collection

function fullfriendsList() {

	tmp = 0
	for friend in friendIDs {
	
		tmp = tmp + bit3(characterPtr() + characterOffset*friend + friendOffset) + bit4(characterPtr() + characterOffset*friend + friendOffset) //b3 is a new entry and b4 is a read entry
	}
	
	return notLoading() && validRoom() && prev(tmp) == 176 && measured(tmp == 177, when = validPtr())
}
function collectAllItems(items) => notLoading() && validRoom() && prev(sum_of(items, s => s)) == length(items) - 1 && measured(sum_of(items, s => s) == length(items), when = validPtr())

//Cutscene Events

function beHonestOleg() => validPtr() && room() == 0x1f && characterRoom(characterID["Oleg"]) == 0x1f && bitflag(1, 0x61632c) == 1 && prev(bit1(characterPtr() + characterOffset*characterID["Oleg"] + olegTaskCompleteOffset)) == 0 && trigger_when(specificDialogue(0x594))
function goodCrocSkin() => never(!validPtr()) && never(room() != 0xfa) && never(bitflag(6, 0x61652b) == 1) && once(prev(bitflag(5, 0x61652b)) == 1) && trigger_when(notLoading() && bitflag(7, 0x61654c) == 1)
function teleportSelf() => validPtr() && notLoading() && room() == 0xf9 && prev(bitflag(7, 0x61654e)) == 1 && trigger_when(bitflag(7, 0x61654e) == 0)
function loseJarvisFoodFight() => validPtr() && room() == 0x206 && inBattle() && firstEnemy() == characterID["Jarvis"] && trigger_when(loseBattle())
function winJarvisFoodFight() => validPtr() && room() == 0x206 && inBattle() && firstEnemy() == characterID["Jarvis"] && trigger_when(winBattle())

function fireworksDate(characterID) => validPtr() && highestAffectionCharacter() == characterID && prev(bitflag(7, 0x616532)) == 1 && trigger_when(notLoading() && room() == 0x1f3 && bitflag(7, 0x616532) == 0)

//Interaction Events

function getGuardMoney() => validPtr() && room() == 0xa5 && dagols() - prev(dagols()) == 1
function sexyPictures() => validPtr() && room() == 0x328 && prev(interactionID()) == 0x64 && interactionID() == 0
function takePicture() => validPtr() && room() == 0xfe && interactionID() == 0xd1 && specificDialogue(0x24c)

//Fun

function dance(roomID, musicID) => never(!validPtr()) && never(room() != roomID) && never(music() != musicID) && trigger_when(repeated(60, __ornext(animation() == powerWalking[0] || animation() == powerWalking[1])))

//Challenges

///Achievements

//Verified
for mission in missionOrder {

	title = ""
	if (none_of(nonmissableMissions, s => s == mission)) title = title + "[m] "
	if (any_of(humanSideMissions, s => s == mission)) title = title + " [Human Side] "
	
	achievement(
	
		title = title + missions[mission],
		description = "Complete " + missions[mission] + " and speak to Thanos",
		points = 10,
		trigger = completeMission(mission)
	)
}
//Note: With the exception of Stone of Miracles (which is required for the story), these can be missed if Jack chooses the Nonhuman Side without doing them first

//Verified
achievement(

	title = "Me and My Friends",
	description = "Add all 177 recruitable characters to your friends list",
	points = 100,
	trigger = fullfriendsList()
)

//Verified
achievement(

	title = "Adien Region Treasure",
	description = "Kick all 12 hidden items in Adien Region",
	points = 5,
	trigger = collectAllItems(adienRegionItems)
)

//Verified
achievement(

	title = "Dova Region Treasure",
	description = "Kick all 6 hidden items in Dova Region",
	points = 5,
	trigger = collectAllItems(dovaRegionItems)
)

//Verified
achievement(

	title = "Earth Valley Treasure",
	description = "Kick all 12 hidden items in Earth Valley",
	points = 5,
	trigger = collectAllItems(earthValleyItems)
)

//Verified
achievement(

	title = "Dwarf Tunnel Treasure",
	description = "Kick all 23 hidden items in Dwarf Tunnel",
	points = 10,
	trigger = collectAllItems(dwarfTunnelItems)
)

//Verified
achievement(

	title = "[m] Cuatour Region Treasure",
	description = "Kick both hidden items in Cuatour Region",
	points = 2,
	trigger = collectAllItems(cuatourRegionItems)
)
//Note: This can be missed if Jack chooses the Human Side without doing this first

//Verified
achievement(

	title = "[m] Elf Region Treasure",
	description = "Kick all 5 hidden items in Elf Region",
	points = 5,
	trigger = collectAllItems(elfRegionItems)
)
//Note: This can be missed if Jack chooses the Human Side without doing this first

//Verified
achievement(

	title = "Nowem Region Treasure",
	description = "Kick all 15 hidden items in Nowem Region",
	points = 5,
	trigger = collectAllItems(nowemRegionItems)
)

//Verified
achievement(

	title = "[m] Forest Metropolis Treasure",
	description = "Kick all 10 hidden items in Forest Metropolis",
	points = 5,
	trigger = collectAllItems(forestMetropolisItems)
)
//Note: This can be missed if Jack chooses the Human Side without doing this first

//Verified
achievement(

	title = "Ocho Region Treasure",
	description = "Kick all 7 hidden items in Ocho Region",
	points = 5,
	trigger = collectAllItems(ochoRegionItems)
)

//Verified
achievement(

	title = "Path of the Spider Treasure",
	description = "Kick all 4 hidden items in Path of the Spider",
	points = 10,
	trigger = collectAllItems(pathOfTheSpiderItems)
)

//Verified
achievement(

	title = "Dorse Region Treasure",
	description = "Kick all 11 hidden items in Dorse Region",
	points = 5,
	trigger = collectAllItems(dorseRegionItems)
)

//Verified
achievement(

	title = "Shangri La Treasure",
	description = "Kick all 5 hidden items in Shangri La",
	points = 5,
	trigger = collectAllItems(shangriLaItems)
)

//Verified
achievement(

	title = "Goblin Cemetery Treasure",
	description = "Kick all 6 hidden items in Goblin Cemetery",
	points = 5,
	trigger = collectAllItems(goblinCemeteryItems)
)

//Verified
achievement(

	title = "Septem Region Treasure",
	description = "Kick all 8 hidden items in Septem Region",
	points = 5,
	trigger = collectAllItems(septemRegionItems)
)

//Verified
achievement(

	title = "Septem Cave Treasure",
	description = "Kick all 3 hidden items in Septem Cave",
	points = 10,
	trigger = collectAllItems(septemCaveItems)
)

//Verified
achievement(

	title = "Algandars Treasure",
	description = "Kick both hidden items in Algandars Castle",
	points = 5,
	trigger = collectAllItems(algandarsCastleItems)
)

//Verified
achievement(

	title = "Dichett Region Treasure",
	description = "Kick all 12 hidden items in Dichett Region",
	points = 5,
	trigger = collectAllItems(dichettRegionItems)
)

//Verified
achievement(

	title = "Fire Mountain Treasure",
	description = "Kick both hidden items in Fire Mountain",
	points = 5,
	trigger = collectAllItems(fireMountainItems)
)

//Verified
achievement(

	title = "Desneuf Region Treasure",
	description = "Kick all 6 hidden items in Desneuf Region",
	points = 5,
	trigger = collectAllItems(desneufRegionItems)
)

//Verified
achievement(

	title = "Borgandiazo Treasure",
	description = "Kick all 9 hidden items in Borgandiazo",
	points = 5,
	trigger = collectAllItems(borgandiazoItems)
)

//Verified
achievement(

	title = "Tria Region Treasure",
	description = "Kick all 22 hidden items in Tria Region",
	points = 10,
	trigger = collectAllItems(triaRegionItems)
)

//Verified
achievement(

	title = "Wind Valley Treasure",
	description = "Kick both hidden items in Wind Valley",
	points = 5,
	trigger = collectAllItems(windValleyItems)
)

//Verified
achievement(

	title = "[m] [Nonhuman Side] City of Flowers Treasure",
	description = "Kick all 8 hidden items in City of Flowers",
	points = 5,
	trigger = collectAllItems(cityOfFlowersItems)
)

//Verified
achievement(

	title = "[m] [Nonhuman Side] Fort Helencia Treasure",
	description = "Kick both hidden items in Fort Helencia",
	points = 2,
	trigger = collectAllItems(fortHelenciaItems)
)

//Verified
achievement(

	title = "[m] [Nonhuman Side] Goblin Haven Treasure",
	description = "Kick all 3 hidden items in Goblin Haven",
	points = 3,
	trigger = collectAllItems(goblinHavenItems)
)

//Verified
achievement(

	title = "[m] [Nonhuman Side] Sediche Region Treasure",
	description = "Kick all 8 hidden items in Sediche Region",
	points = 5,
	trigger = collectAllItems(sedicheRegionItems)
)

//Verified
achievement(

	title = "[m] [Human Side] Radiata Castle Treasure",
	description = "Kick all 27 hidden items in Radiata Castle",
	points = 10,
	trigger = collectAllItems(radiataCastleItems)
)

//Verified
achievement(

	title = "[m] [Human Side] Radiata City Treasure",
	description = "Kick all 88 hidden items in Radiata City",
	points = 25,
	trigger = collectAllItems(radiataCityItems)
)

//Verified
achievement(

	title = "Dysett Region Treasure",
	description = "Kick all 8 hidden items in Dysett Region",
	points = 5,
	trigger = collectAllItems(dysettRegionItems)
)

//Verified
achievement(

	title = "City of White Nights Treasure",
	description = "Kick all 3 hidden items in City of White Nights",
	points = 5,
	trigger = collectAllItems(cityOfWhiteNightsItems)
)

//Verified
achievement(

	title = "Dragon Lair Cave Treasure",
	description = "Kick all 4 hidden items in Dragon Lair Cave",
	points = 5,
	trigger = collectAllItems(dragonLairCaveItems)
)

//Verified
achievement(

	title = "Distortion Corridor Treasure",
	description = "Kick all 3 hidden items in Distortion Corridor",
	points = 5,
	trigger = collectAllItems(distortionCorridorItems)
)

//Verified
achievement(

	title = "Shrine of Fray Treasure",
	description = "Kick all 4 hidden items in Shrine of Fray",
	points = 5,
	trigger = collectAllItems(shrineOfFrayItems)
)

//Verified
achievement(

	title = "[m] Honesty Goes a Long Way",
	description = "Be honest to Oleg about the liquor thieves",
	points = 5,
	trigger = beHonestOleg()
)
//Note: This can be missed if Jack chooses to lie to Oleg

//Verified
achievement(

	title = "[m] Ladies Only?",
	description = "Attempt to enter the women's restroom",
	points = 1,
	trigger = bitflagTrue(0x90, 0, 0x616358)
)
//Note: This can be missed if Jack chooses the Nonhuman Side without doing this first

//Verified
achievement(

	title = "[m] Exquisite Taste",
	description = "Give Ganz a bottle of Elven Wine",
	points = 5,
	trigger = bitflagTrue(0x107, 7, 0x616549)
)
//Note: Jack can only do this during Forest Metropolis

//Verified
achievement(

	title = "[m] Rabbit Chase",
	description = "Track down Leonard for Theresa",
	points = 5,
	trigger = bitflagFalse(0xa3, 6, 0x616527)
)
//Note: Jack can only do this after Forest Metropolis and before Theater Vancoor

//Verified
achievement(

	title = "[m] Chamber of Reflection",
	description = "Look at your reflection in an enchanted mirror",
	points = 1,
	trigger = bitflagTrue(0x1fa, 6, 0x616363)
)
//Note: This can be missed if Jack chooses the Nonhuman Side without doing this first

//Verified
achievement(

	title = "[m] Oblivious Genius",
	description = "Help Leona find her glasses",
	points = 1,
	trigger = bitflagTrue(0x3ac, 2, 0x6163f6)
)
//Note: This can be missed if Jack chooses the Nonhuman Side without doing this first

//Verified
achievement(

	title = "[m] Lifetime's Worth of Luck",
	description = "Collect a Crocogator's Skin for Anastasia that is worthy of a great reward",
	points = 10,
	trigger = goodCrocSkin()
)
//Note: This can be missed if Jack and Jarvis collect a normal Crocogator's Skin

//Verified
achievement(

	title = "[m] Kinesthetic Learner",
	description = "Get scolded by Jarvis for teleporting to the same location",
	points = 1,
	trigger = teleportSelf()
)
//Note: This can be missed if Jack teleports successfully on the first try

//Verified
achievement(

	title = "[m] A Drink With a Meal Is Good for You",
	description = "Lose the fight against Jarvis to eat at Carl's Pub",
	points = 1,
	trigger = loseJarvisFoodFight()
)
//Note: This can be missed if Jack wins the fight

//Verified
achievement(

	title = "[m] Yur-In Love",
	description = "Win the fight against Jarvis to eat at Begin Eatery",
	points = 5,
	trigger = winJarvisFoodFight()
)
//Note: This can be missed if Jack loses the fight

//Unverified
achievement(

	title = "[m] [Human Side] Underdeveloped Planet Protection Pact",
	description = "Stumble upon a strange apparition",
	points = 1,
	trigger = bitflagFalse(0xab, 1, 0x616361)
)

//Verified
for date in dates {

	points = 5
	if (any_of(hardDates, s => s == date)) points = 10
	
	achievement(
	
		title = "[m] [Human Side] " + date + "'s Date",
		description = "Watch the fireworks with " + date,
		points = points,
		trigger = fireworksDate(characterID[date])
	)
}

//Verified
achievement(

	title = "[m] Side Hustle",
	description = "Get 1 Dagol by kicking a guard",
	points = 1,
	trigger = getGuardMoney()
)
//Note: This can only be done on Jack's first visit to Radiata Castle

//Verified
achievement(

	title = "[m] Seksee Pictures",
	description = "Read an advertisement for the Rachel Fan Club",
	points = 1,
	trigger = sexyPictures()
)
//Note: This can be missed if Jack chooses the Nonhuman Side without doing this first

//Verified
achievement(

	title = "Say Cheese",
	description = "Take a picture with a goblin photo stand-in",
	points = 1,
	trigger = takePicture()
)

//Verified
achievement(

	title = "[m] One With Nature",
	description = "Power walk for a moment at the Dark Elf Band's concert",
	points = 1,
	trigger = dance(0x10a, 0x2d)
)
//Note: This can be missed if Jack chooses the Human Side without doing this first

//Verified
achievement(

	title = "[m] Crazy Tunez",
	description = "Power walk for a moment at Ernest's concert",
	points = 1,
	trigger = dance(0x3ac, 0x30)
)
//Note: This can be missed if Jack chooses the Nonhuman Side without doing this first

//Verified
achievement(

	title = "[m] Let's Get It On",
	description = "Power walk for a moment at Rachel's concert",
	points = 1,
	trigger = dance(0x324, 0x86)
)
//Note: This can be missed if Jack chooses the Nonhuman Side without doing this first

//Verified
achievement(

	title = "[m] Love♪ Dream♪ No Thanks♪",
	description = "Power walk for a moment at Donkey's concert",
	points = 1,
	trigger = dance(0x79, 0x1c)
)
//Note: This can be missed if Jack chooses the Human Side without doing this first